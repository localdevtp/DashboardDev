<%@ Master Language="C#" MasterPageFile="~/umbraco/masterpages/default.master" AutoEventWireup="true" %>
<%@ Assembly Name="Componax.ExtensionMethods" %>

<asp:Content ContentPlaceHolderID="ContentPlaceHolderDefault" runat="server">
<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
<head>
  
  <!-- Meta -->
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <title>Classic Uploader</title>

  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  
  <!-- Styles -->
  <link href="/css/bootstrap.css" rel="stylesheet">
  <link href="/css/bootstrap-responsive.css" rel="stylesheet">
  <link href="/css/icons.css" rel="stylesheet">
  <link href="/css/main.css" rel="stylesheet">
  <link href="/css/colors-tp.css" rel="stylesheet">
  
  <!--[if lte IE 8]>
  <script src="/fonts/main/cufon-yui.js" type="text/javascript"></script>
  <script src="/fonts/main/main.font.js" type="text/javascript"></script>
  <script src="/fonts/main/lte-ie8.js" type="text/javascript"></script>
  <![endif]-->
  
  <!-- Modernizr -->
  <script src="/scripts/modernizr.js"></script>

  <!-- Custom head items -->
  <style>
	  body { background:#FFF; }
	  .classic-uploader { padding:0 10px; }
	  #ContentPlaceHolderDefault_uplValidator, span.error { color:#e74c3c; display:inline-block; padding-left:10px; font-size:11px; }
	  @media only screen and (max-width:767px) {
		  #ContentPlaceHolderDefault_uplValidator, span.error { display:block; padding:4px 0; }
	  }
  </style>
</head>

<body>
	<div class="classic-uploader clearfix">
		<div class="alert alert-info">
			To upload your image, browse for your image and then click upload.
		</div>
		<form id="form1" runat="server">
			<div id="ClassicUploaderContainer">
				<asp:FileUpload ID="ClassicUploader" runat="server" class="file-input">
				</asp:FileUpload>
				<asp:RegularExpressionValidator ID="uplValidator" runat="server" ControlToValidate="ClassicUploader"
					ErrorMessage="Only .jpg & .png formats are allowed" 
					ValidationExpression="(.+\.([Jj][Pp][Gg])|.+\.([Pp][Nn][Gg]))"></asp:RegularExpressionValidator>
				<!--
				<input id = "BrowsePhoto" type="button" value="Browse" onclick = "document.getElementById('ContentPlaceHolderDefault_ClassicUploader').click();"/>
				-->
				<asp:HiddenField ID="UploadStatus" runat="server" />
				<br /><br />
				<small>
					Only JPEG(.jpg) and PNG(.png) image are supported.<br />
					Image filsize must be less then 2MB.
				</small>
			</div>
			<div class="form-actions center">
				<asp:Button ID="UploadPhoto" runat="server" Text="Upload" class="btn btn-success ignore-load" />
			</div>
		</form>
	</div>
	
  <!-- Start Scripts -->  
  <umbraco:Macro files="jquery-1.7.2.min,jquery-ui-1.8.21.custom.min,jquery-extra-selectors,bootstrap.min,plugins/jquery.placeholder,mains/ui-retina,mains/ui-alert,mains/ui-header,mains/ui-navigation,mains/ui-sortable,mains/ui-wysiwyg,mains/ui-password-meter,mains/ui-btn-load,main" local="1" Alias="ScriptLoader" runat="server"></umbraco:Macro>
  <script>
	  $(document).on('change','.file-input',function(){
		  try {
			  var f=this.files[0],
				  limit=2097152; // in bytes (2MB = 2097152)
			  if(f.size > limit || f.fileSize > limit){
				  if($(this).parent().next().next().not('.filesize')) {
					  $(this).parent().next().after('<span class="error filesize">Image filesize must be less then 2MB.</span>');
				  }
			  } else {
				  $(this).parent().next().next('.filesize').remove();
			  }
		  } catch(e) {}
	  });
	  $('form').on('submit',function(e){
		  if($('.filesize').length > 0) {
		  	e.preventDefault();
		  }
	  });
  </script>
</body>
</html>
</asp:Content>
	
<script runat="server">

	/// <summary>
	/// Specifies the method to be used when resizing an image
	/// </summary>
	public enum ResizeMethod
	{
		// Crops the image to fit wholly within the bounds
		CropToFit,
				
		/// <summary>
		/// Scales the image to a constant size, applying a white background for any aspect mismatch
		/// </summary>
		ConstantSize,
				
		/// <summary>
		/// Scales the image to fit withing the bounds, with a variable aspect ratio
		/// </summary>
		ScaleToFit
	}
	
	 protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                EasyList.Data.DAL.Repository.IRepository repo = EasyList.Data.DAL.Repository.RepositorySetup.Setup();

                var ImageCDNPath = @"http://images.tradingpost.com.au";
                var BucketName = "images.easylist.com.au";
                var LocalRootPath = @"C:\ImageTemp";
                var RemotePath = ""; 	// Path in S3
                var LocalFolderPath = "";	// Temporary path in local drive
                var LocalFilePath = "";	// Temporary path in local drive

                var UserID = "";
                if (HttpContext.Current.Session["easylist-username"] != null)
                    UserID = HttpContext.Current.Session["easylist-username"].ToString();

                var UserCode = "";
                if (HttpContext.Current.Session["easylist-usercode"] != null)
                    UserCode = HttpContext.Current.Session["easylist-usercode"].ToString();

                // CompanyLogo : Privacy settings page
                // NewImage
                // EditImage
                var UploadType = "CompanyLogo";
                if (Request.QueryString["UploadType"] != null)
                {
                    UploadType = Request.QueryString["UploadType"].ToString();
                }

                //-------------------------------------------------------------------------------
                // Validation
                //-------------------------------------------------------------------------------
                if (String.IsNullOrEmpty(UserID))
                {
                    throw new Exception("User ID not exists!");
                }
                if (String.IsNullOrEmpty(UserCode))
                {
                    throw new Exception("User code not exists!");
                }

                if (String.IsNullOrEmpty(UploadType))
                {
                    throw new Exception("Upload type not defined!");
                }
                
                if (IsPostBack && !ClassicUploader.HasFile)
                {
                    throw new Exception("Please choose file to upload!");
                }

                //-------------------------------------------------------------------------------
                // Post image
                //-------------------------------------------------------------------------------
                if (IsPostBack && ClassicUploader.HasFile)
                {
                    switch (UploadType)
                    {
                        //-------------------------------------------------------------------------------
                        #region Company Logo
                        case "CompanyLogo":
                            string FolderName = "Settings";
                            var ImgUniqueID = EasyList.Common.Helpers.Utils.GenerateUniqueID(4);
                            var FileName = "CompanyLogo-" + ImgUniqueID;

                            LocalFolderPath = string.Format(@"{0}\{1}\{2}", LocalRootPath, UserCode, FolderName);
                            if (!System.IO.Directory.Exists(LocalFolderPath))
                                System.IO.Directory.CreateDirectory(LocalFolderPath);

                            var FileExt = System.IO.Path.GetExtension(ClassicUploader.FileName).ToString();
                            LocalFilePath = string.Format(@"{0}\{1}{2}", LocalFolderPath, FileName, FileExt);

                            var ExDisplayCompLogoXML = "";

                            RemotePath = string.Format(@"{0}/{1}/{2}{3}", UserCode, FolderName, FileName + "-Source", FileExt);
                            ClassicUploader.SaveAs(LocalFilePath);
                            if (System.IO.File.Exists(LocalFilePath))
                            {
                                var fh = new EasyList.AmazonAWS.S3.FileHelper();
                                using (System.Drawing.Image sourceImage = System.Drawing.Image.FromFile(LocalFilePath))
                                {
                                    //-------------------------------------------------------------
                                    // Upload to S3
                                    //-------------------------------------------------------------
                                    fh.UploadFile(LocalFilePath, BucketName, RemotePath, null);

                                    //-------------------------------------------------------------
                                    // Create resized version of company logo
                                    //-------------------------------------------------------------
                                    string LocalResizePath = "";
                                    string RemoteSizePath = "";
                                    var resizedVersions = new List<EasyList.Data.BL.ImageResizeInfo>();
                                    resizedVersions.Add(CreateResizedVersion(LocalRootPath, ImageCDNPath, sourceImage,
                                        new System.Drawing.Size(600, 125), UserCode, FolderName, FileName, ResizeMethod.ScaleToFit, 75, FileExt, out LocalResizePath, out RemoteSizePath));

                                    // Upload resized pic to S3
                                    fh.UploadFile(LocalResizePath, BucketName, RemoteSizePath, null);

                                    // Delete local resized copy
                                    if (System.IO.File.Exists(LocalResizePath)) System.IO.File.Delete(LocalResizePath);

                                    resizedVersions.Add(CreateResizedVersion(LocalRootPath, ImageCDNPath, sourceImage,
                                        new System.Drawing.Size(300, 65), UserCode, FolderName, FileName, ResizeMethod.ScaleToFit, 75, FileExt, out LocalResizePath, out RemoteSizePath));

                                    // Upload resized pic to S3
                                    fh.UploadFile(LocalResizePath, BucketName, RemoteSizePath, null);

                                    // Delete local resized copy
                                    if (System.IO.File.Exists(LocalResizePath)) System.IO.File.Delete(LocalResizePath);

                                    var primaryImage = (from i in resizedVersions
                                                        where i.Width == 600
                                                        && i.Height == 125
                                                        select i).FirstOrDefault();

                                    var newImage = new EasyList.Data.BL.ImageInfo
                                    {
                                        DisplayOrder = 1,
                                        ImageID = 0,
                                        Url = primaryImage.Url,
                                        SourceUrl = primaryImage.Url,
                                        ResizedVersions = resizedVersions,
                                        Description = "PrivacySetting",
                                        Title = FileName + "-Source" + FileExt,
                                        ImageCode = "CompanyLogo"
                                    };

                                    var newImageXML = EasyList.Common.Helpers.Utils.ObjectToXML(newImage);

                                    //-------------------------------------------------------------
                                    // Update DB
                                    //-------------------------------------------------------------
                                    
                                    var UserInfo = repo.Single<EasyList.Data.DAL.Repository.Entity.Users>(u => u.UserCode == UserCode);
                                    if (UserInfo != null)
                                    {
                                        EasyList.Data.BL.ImageInfo ImgInfo = new EasyList.Data.BL.ImageInfo();

                                        ExDisplayCompLogoXML = UserInfo.DisplayCompLogo;
                                        UserInfo.DisplayCompLogo = newImageXML;

                                        repo.Save<EasyList.Data.DAL.Repository.Entity.Users>(UserInfo);
                                    }
                                    sourceImage.Dispose();
                                } 

                                //-------------------------------------------------------------
                                // Houskeep - Temp mage in local path
                                //-------------------------------------------------------------
                                if (System.IO.File.Exists(LocalFilePath)) System.IO.File.Delete(LocalFilePath);

                                //-------------------------------------------------------------
                                // Houskeep - Delete existing image from S3
                                //-------------------------------------------------------------
                                if (!string.IsNullOrEmpty(ExDisplayCompLogoXML))
                                {
                                    var ExDisplayCompLogo = EasyList.Common.Helpers.Utils.XMLToObject<EasyList.Data.BL.ImageInfo>(ExDisplayCompLogoXML);

                                    try
                                    {
                                        RemotePath = string.Format(@"{0}/{1}/{2}", UserCode, FolderName, ExDisplayCompLogo.Title);
                                        fh.DeleteFile(BucketName, RemotePath);

                                        foreach (var img in ExDisplayCompLogo.ResizedVersions)
                                        {
                                            System.Uri uri = new System.Uri(img.Url);
                                            string ImgResizeFileName = System.IO.Path.GetFileName(uri.LocalPath);

                                            RemotePath = string.Format(@"{0}/{1}/{2}", UserCode, FolderName, ImgResizeFileName);
                                            fh.DeleteFile(BucketName, RemotePath);

                                        }
                                    }
                                    catch (Exception)
                                    {
                                    }
                                }

                                UploadStatus.Value = "Success";
                                ClassicUploader.Visible = false;
                                UploadPhoto.Visible = false;
								
								//Response.Write("Hello World");
								
								//Response.Write("<script language='javascript'>");
								//Response.Write("parent.closeMP();");
								//Response.Write("return true;");
								//Response.Write("<" + "/script>");
								
								Response.Write("<script language='javascript'>");
								Response.Write("window.onload = function () { parent.closeMP(); }");
								Response.Write("<" + "/script>");
                            }
                            else
                            {
                                throw new Exception("Failed to upload file to server!");
                            }

                            break;
                        #endregion
                        //-------------------------------------------------------------------------------
                        
                        //-------------------------------------------------------------------------------
                        // NewListing
                        //-------------------------------------------------------------------------------
                        case "NewListing":

                        //-------------------------------------------------------------------------------
                        // Existing Listing
                        //-------------------------------------------------------------------------------
                        case "ExListing":

                        default:
                            break;
                    }
                }

            }
            catch (Exception ex)
            {
                UploadStatus.Value = "Fail";
                Response.Write("Something bad happened! Error: " + ex);
            }
        }

	
	public EasyList.Data.BL.ImageResizeInfo CreateResizedVersion(string LocalRootPath, string ImageCDNPath, 
            System.Drawing.Image Source, System.Drawing.Size Size, string UserCode,
            string FolderName, string FileName, ResizeMethod RM, long Quality, string ImageExt, out string LocalResizeFilePath, out string RemoteSizePath)
        {

            LocalResizeFilePath = System.IO.Path.Combine(LocalRootPath, string.Format("{0}\\{1}\\{2}-Resized{3}x{4}{5}",
            UserCode, FolderName, FileName, Size.Width, Size.Height, ImageExt));

            var FileUrl = string.Format("{0}/{1}/{2}/{3}-Resized{4}x{5}{6}",
                ImageCDNPath, UserCode, FolderName, FileName, Size.Width, Size.Height, ImageExt);

            RemoteSizePath = string.Format("{0}/{1}/{2}-Resized{3}x{4}{5}", UserCode, FolderName, FileName, Size.Width, Size.Height, ImageExt);

            // Check that the target directory exists..
            var dir = new System.IO.DirectoryInfo(System.IO.Path.GetDirectoryName(LocalResizeFilePath));
            if (!dir.Exists)
            {
                EasyList.Common.Helpers.Utils.DirectoryCreateTreeSructure(dir);
            }

            switch (RM)
            {
                case ResizeMethod.ConstantSize:
                    EasyList.Common.Helpers.Utils.ImageResizeAndSaveWithBackground(Source, Size, LocalResizeFilePath, Quality, System.Drawing.Color.Black);
                    break;

                case ResizeMethod.CropToFit:
                    EasyList.Common.Helpers.Utils.ImageCropAndSave(Source, Size, EasyList.Common.Helpers.Utils.ImageAnchorPosition.Center, LocalResizeFilePath, Quality);
                    break;

                case ResizeMethod.ScaleToFit:
                    EasyList.Common.Helpers.Utils.ImageResizeAndSave(Source, Size, LocalResizeFilePath, Quality);
                    break;
            }

            return new EasyList.Data.BL.ImageResizeInfo(FileUrl, Size.Width, Size.Height, true, Quality);
        }
	
	
        protected void BrowseFile_Click(object sender, EventArgs e)
        {

        }
</script>